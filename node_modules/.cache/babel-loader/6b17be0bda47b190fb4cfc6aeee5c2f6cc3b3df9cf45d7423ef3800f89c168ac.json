{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport { animate } from 'motion';\nimport { cx } from '@arwes/tools';\nimport { mergeRefs } from '@arwes/react-tools';\nimport { ANIMATOR_STATES } from '@arwes/animator';\nimport { useAnimator } from '@arwes/react-animator';\nconst {\n  entering,\n  exiting\n} = ANIMATOR_STATES;\nconst defaultProps = {\n  lineWidth: 1,\n  lineColor: '#777',\n  horizontalLineDash: [4],\n  verticalLineDash: [],\n  distance: 30\n};\nconst GridLines = props => {\n  const propsFull = {\n    ...defaultProps,\n    ...props\n  };\n  const {\n    elementRef: elementRefExternal,\n    className,\n    style\n  } = propsFull;\n  const animator = useAnimator();\n  const elementRef = useRef(null);\n  const propsFullRef = useRef(propsFull);\n  propsFullRef.current = propsFull;\n  useEffect(() => {\n    if (!animator) {\n      return;\n    }\n    const canvas = elementRef.current;\n    const ctx = canvas.getContext('2d');\n    let transitionControl;\n    let resizeObserver;\n    const draw = () => {\n      const {\n        lineWidth,\n        lineColor,\n        horizontalLineDash,\n        verticalLineDash,\n        distance\n      } = propsFullRef.current;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n      const xLength = 1 + Math.floor(width / distance);\n      const yLength = 1 + Math.floor(height / distance);\n      const xMargin = width % distance;\n      const yMargin = height % distance;\n      canvas.width = width;\n      canvas.height = height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = lineColor;\n      // Horizontal lines.\n      ctx.setLineDash(horizontalLineDash);\n      for (let yIndex = 0; yIndex < yLength; yIndex++) {\n        const y = yMargin / 2 + yIndex * distance;\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n        ctx.closePath();\n      }\n      // Vertical lines.\n      ctx.setLineDash(verticalLineDash);\n      for (let xIndex = 0; xIndex < xLength; xIndex++) {\n        const x = xMargin / 2 + xIndex * distance;\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    };\n    const animatorSubscription = node => {\n      const state = node.state;\n      const {\n        duration\n      } = node.control.getSettings();\n      switch (state) {\n        case entering:\n          {\n            draw();\n            transitionControl = animate(canvas, {\n              opacity: [0, 1]\n            }, {\n              duration: duration === null || duration === void 0 ? void 0 : duration.enter,\n              easing: 'ease-out'\n            });\n            break;\n          }\n        case exiting:\n          {\n            transitionControl = animate(canvas, {\n              opacity: [1, 0]\n            }, {\n              duration: duration === null || duration === void 0 ? void 0 : duration.exit,\n              easing: 'ease-out'\n            });\n            break;\n          }\n      }\n    };\n    animator.node.subscribers.add(animatorSubscription);\n    if (window.ResizeObserver && !resizeObserver) {\n      resizeObserver = new window.ResizeObserver(() => draw());\n      resizeObserver.observe(canvas);\n    }\n    return () => {\n      animator.node.subscribers.delete(animatorSubscription);\n      transitionControl === null || transitionControl === void 0 ? void 0 : transitionControl.cancel();\n      resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();\n    };\n  }, [animator]);\n  return React.createElement(\"canvas\", {\n    ref: mergeRefs(elementRef, elementRefExternal),\n    className: cx('arwes-react-bgs-gridlines', className),\n    style: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      display: 'block',\n      border: 0,\n      margin: 0,\n      padding: 0,\n      width: '100%',\n      height: '100%',\n      opacity: 0,\n      ...style\n    }\n  });\n};\nGridLines.defaultProps = defaultProps;\nexport { GridLines };","map":{"version":3,"names":["React","useRef","useEffect","animate","cx","mergeRefs","ANIMATOR_STATES","useAnimator","entering","exiting","defaultProps","lineWidth","lineColor","horizontalLineDash","verticalLineDash","distance","GridLines","props","propsFull","elementRef","elementRefExternal","className","style","animator","propsFullRef","current","canvas","ctx","getContext","transitionControl","resizeObserver","draw","width","clientWidth","height","clientHeight","xLength","Math","floor","yLength","xMargin","yMargin","clearRect","strokeStyle","setLineDash","yIndex","y","beginPath","moveTo","lineTo","stroke","closePath","xIndex","x","animatorSubscription","node","state","duration","control","getSettings","opacity","enter","easing","exit","subscribers","add","window","ResizeObserver","observe","delete","cancel","disconnect","createElement","ref","position","left","top","display","border","margin","padding"],"sources":["/Users/richardbrown/Desktop/react example/my-app/node_modules/@arwes/react-bgs/build/esm/GridLines/GridLines.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { animate } from 'motion';\nimport { cx } from '@arwes/tools';\nimport { mergeRefs } from '@arwes/react-tools';\nimport { ANIMATOR_STATES } from '@arwes/animator';\nimport { useAnimator } from '@arwes/react-animator';\nconst { entering, exiting } = ANIMATOR_STATES;\nconst defaultProps = {\n    lineWidth: 1,\n    lineColor: '#777',\n    horizontalLineDash: [4],\n    verticalLineDash: [],\n    distance: 30\n};\nconst GridLines = (props) => {\n    const propsFull = { ...defaultProps, ...props };\n    const { elementRef: elementRefExternal, className, style } = propsFull;\n    const animator = useAnimator();\n    const elementRef = useRef(null);\n    const propsFullRef = useRef(propsFull);\n    propsFullRef.current = propsFull;\n    useEffect(() => {\n        if (!animator) {\n            return;\n        }\n        const canvas = elementRef.current;\n        const ctx = canvas.getContext('2d');\n        let transitionControl;\n        let resizeObserver;\n        const draw = () => {\n            const { lineWidth, lineColor, horizontalLineDash, verticalLineDash, distance } = propsFullRef.current;\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n            const xLength = 1 + Math.floor(width / distance);\n            const yLength = 1 + Math.floor(height / distance);\n            const xMargin = width % distance;\n            const yMargin = height % distance;\n            canvas.width = width;\n            canvas.height = height;\n            ctx.clearRect(0, 0, width, height);\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = lineColor;\n            // Horizontal lines.\n            ctx.setLineDash(horizontalLineDash);\n            for (let yIndex = 0; yIndex < yLength; yIndex++) {\n                const y = (yMargin / 2) + (yIndex * distance);\n                ctx.beginPath();\n                ctx.moveTo(0, y);\n                ctx.lineTo(width, y);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Vertical lines.\n            ctx.setLineDash(verticalLineDash);\n            for (let xIndex = 0; xIndex < xLength; xIndex++) {\n                const x = (xMargin / 2) + (xIndex * distance);\n                ctx.beginPath();\n                ctx.moveTo(x, 0);\n                ctx.lineTo(x, height);\n                ctx.stroke();\n                ctx.closePath();\n            }\n        };\n        const animatorSubscription = (node) => {\n            const state = node.state;\n            const { duration } = node.control.getSettings();\n            switch (state) {\n                case entering: {\n                    draw();\n                    transitionControl = animate(canvas, { opacity: [0, 1] }, { duration: duration === null || duration === void 0 ? void 0 : duration.enter, easing: 'ease-out' });\n                    break;\n                }\n                case exiting: {\n                    transitionControl = animate(canvas, { opacity: [1, 0] }, { duration: duration === null || duration === void 0 ? void 0 : duration.exit, easing: 'ease-out' });\n                    break;\n                }\n            }\n        };\n        animator.node.subscribers.add(animatorSubscription);\n        if (window.ResizeObserver && !resizeObserver) {\n            resizeObserver = new window.ResizeObserver(() => draw());\n            resizeObserver.observe(canvas);\n        }\n        return () => {\n            animator.node.subscribers.delete(animatorSubscription);\n            transitionControl === null || transitionControl === void 0 ? void 0 : transitionControl.cancel();\n            resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();\n        };\n    }, [animator]);\n    return (React.createElement(\"canvas\", { ref: mergeRefs(elementRef, elementRefExternal), className: cx('arwes-react-bgs-gridlines', className), style: {\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            display: 'block',\n            border: 0,\n            margin: 0,\n            padding: 0,\n            width: '100%',\n            height: '100%',\n            opacity: 0,\n            ...style\n        } }));\n};\nGridLines.defaultProps = defaultProps;\nexport { GridLines };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
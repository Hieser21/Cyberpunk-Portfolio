{"ast":null,"code":"import { createTOScheduler } from '@arwes/tools';\nimport { createAnimatorMachine } from \"../internal/createAnimatorMachine/index.js\";\nimport { createAnimatorManager } from \"../internal/createAnimatorManager/index.js\";\nconst createAnimatorSystem = () => {\n  const systemId = `s${Date.now()}${Math.random()}`.replace('.', '');\n  let nodeIdCounter = 0;\n  let root;\n  const createNode = (parent, control) => {\n    const nodeId = `${systemId}-n${nodeIdCounter++}`;\n    // The node object reference is passed around in multiple places with some\n    // circular references, so this is an object base and later is modified\n    // with specific readonly and writable properties.\n    const node = {};\n    const settings = control.getSettings();\n    const machine = createAnimatorMachine(node, settings.initialState);\n    const manager = createAnimatorManager(node, settings.manager);\n    const nodeProps = {\n      id: {\n        value: nodeId,\n        enumerable: true\n      },\n      control: {\n        value: control,\n        enumerable: true\n      },\n      parent: {\n        value: parent,\n        enumerable: true\n      },\n      children: {\n        value: new Set(),\n        enumerable: true\n      },\n      subscribers: {\n        value: new Set(),\n        enumerable: true\n      },\n      scheduler: {\n        value: createTOScheduler(),\n        enumerable: true\n      },\n      duration: {\n        get: () => {\n          const {\n            duration,\n            combine\n          } = node.control.getSettings();\n          const enter = combine ? node.manager.getDurationEnter(Array.from(node.children)) : duration.enter || 0;\n          const exit = duration.exit || 0;\n          return {\n            enter,\n            exit\n          };\n        },\n        enumerable: true\n      },\n      state: {\n        get: () => machine.getState(),\n        enumerable: true\n      },\n      subscribe: {\n        value: subscriber => {\n          node.subscribers.add(subscriber);\n          subscriber(node);\n          return () => node.subscribers.delete(subscriber);\n        },\n        enumerable: true\n      },\n      unsubscribe: {\n        value: subscriber => {\n          node.subscribers.delete(subscriber);\n        },\n        enumerable: true\n      },\n      send: {\n        value: machine.send,\n        enumerable: true\n      },\n      manager: {\n        value: manager,\n        enumerable: true,\n        writable: true\n      }\n    };\n    Object.defineProperties(node, nodeProps);\n    if (parent) {\n      parent.children.add(node);\n    }\n    return node;\n  };\n  const removeNode = node => {\n    node.scheduler.stopAll();\n    for (const child of node.children) {\n      removeNode(child);\n    }\n    if (node.parent) {\n      node.parent.children.delete(node);\n    }\n    node.children.clear();\n    node.subscribers.clear();\n  };\n  const register = (parentNode, control) => {\n    if (parentNode === undefined || parentNode === null) {\n      if (root) {\n        throw new Error('The root node must be unregistered before registering another root node.');\n      }\n      root = createNode(undefined, control);\n      return root;\n    }\n    if (!root) {\n      throw new Error('A root node needs to be registered first in the system before registering children nodes.');\n    }\n    return createNode(parentNode, control);\n  };\n  const unregister = node => {\n    if (!root) {\n      return;\n    }\n    removeNode(node);\n    if (root.id === node.id) {\n      root = undefined;\n    }\n  };\n  // System object reference so it can have dynamic object properties setup later.\n  const system = {};\n  const systemProps = {\n    id: {\n      value: systemId,\n      enumerable: true\n    },\n    root: {\n      get: () => root,\n      enumerable: true\n    },\n    register: {\n      value: register,\n      enumerable: true\n    },\n    unregister: {\n      value: unregister,\n      enumerable: true\n    }\n  };\n  Object.defineProperties(system, systemProps);\n  return system;\n};\nexport { createAnimatorSystem };","map":{"version":3,"names":["createTOScheduler","createAnimatorMachine","createAnimatorManager","createAnimatorSystem","systemId","Date","now","Math","random","replace","nodeIdCounter","root","createNode","parent","control","nodeId","node","settings","getSettings","machine","initialState","manager","nodeProps","id","value","enumerable","children","Set","subscribers","scheduler","duration","get","combine","enter","getDurationEnter","Array","from","exit","state","getState","subscribe","subscriber","add","delete","unsubscribe","send","writable","Object","defineProperties","removeNode","stopAll","child","clear","register","parentNode","undefined","Error","unregister","system","systemProps"],"sources":["/Users/richardbrown/Desktop/react example/my-app/node_modules/@arwes/animator/build/esm/createAnimatorSystem/createAnimatorSystem.js"],"sourcesContent":["import { createTOScheduler } from '@arwes/tools';\nimport { createAnimatorMachine } from \"../internal/createAnimatorMachine/index.js\";\nimport { createAnimatorManager } from \"../internal/createAnimatorManager/index.js\";\nconst createAnimatorSystem = () => {\n    const systemId = `s${Date.now()}${Math.random()}`.replace('.', '');\n    let nodeIdCounter = 0;\n    let root;\n    const createNode = (parent, control) => {\n        const nodeId = `${systemId}-n${nodeIdCounter++}`;\n        // The node object reference is passed around in multiple places with some\n        // circular references, so this is an object base and later is modified\n        // with specific readonly and writable properties.\n        const node = {};\n        const settings = control.getSettings();\n        const machine = createAnimatorMachine(node, settings.initialState);\n        const manager = createAnimatorManager(node, settings.manager);\n        const nodeProps = {\n            id: {\n                value: nodeId,\n                enumerable: true\n            },\n            control: {\n                value: control,\n                enumerable: true\n            },\n            parent: {\n                value: parent,\n                enumerable: true\n            },\n            children: {\n                value: new Set(),\n                enumerable: true\n            },\n            subscribers: {\n                value: new Set(),\n                enumerable: true\n            },\n            scheduler: {\n                value: createTOScheduler(),\n                enumerable: true\n            },\n            duration: {\n                get: () => {\n                    const { duration, combine } = node.control.getSettings();\n                    const enter = combine\n                        ? node.manager.getDurationEnter(Array.from(node.children))\n                        : duration.enter || 0;\n                    const exit = duration.exit || 0;\n                    return { enter, exit };\n                },\n                enumerable: true\n            },\n            state: {\n                get: () => machine.getState(),\n                enumerable: true\n            },\n            subscribe: {\n                value: (subscriber) => {\n                    node.subscribers.add(subscriber);\n                    subscriber(node);\n                    return () => node.subscribers.delete(subscriber);\n                },\n                enumerable: true\n            },\n            unsubscribe: {\n                value: (subscriber) => {\n                    node.subscribers.delete(subscriber);\n                },\n                enumerable: true\n            },\n            send: {\n                value: machine.send,\n                enumerable: true\n            },\n            manager: {\n                value: manager,\n                enumerable: true,\n                writable: true\n            }\n        };\n        Object.defineProperties(node, nodeProps);\n        if (parent) {\n            parent.children.add(node);\n        }\n        return node;\n    };\n    const removeNode = (node) => {\n        node.scheduler.stopAll();\n        for (const child of node.children) {\n            removeNode(child);\n        }\n        if (node.parent) {\n            node.parent.children.delete(node);\n        }\n        node.children.clear();\n        node.subscribers.clear();\n    };\n    const register = (parentNode, control) => {\n        if (parentNode === undefined || parentNode === null) {\n            if (root) {\n                throw new Error('The root node must be unregistered before registering another root node.');\n            }\n            root = createNode(undefined, control);\n            return root;\n        }\n        if (!root) {\n            throw new Error('A root node needs to be registered first in the system before registering children nodes.');\n        }\n        return createNode(parentNode, control);\n    };\n    const unregister = (node) => {\n        if (!root) {\n            return;\n        }\n        removeNode(node);\n        if (root.id === node.id) {\n            root = undefined;\n        }\n    };\n    // System object reference so it can have dynamic object properties setup later.\n    const system = {};\n    const systemProps = {\n        id: {\n            value: systemId,\n            enumerable: true\n        },\n        root: {\n            get: () => root,\n            enumerable: true\n        },\n        register: {\n            value: register,\n            enumerable: true\n        },\n        unregister: {\n            value: unregister,\n            enumerable: true\n        }\n    };\n    Object.defineProperties(system, systemProps);\n    return system;\n};\nexport { createAnimatorSystem };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}